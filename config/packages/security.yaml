security:
  encoders:
      App\Entity\Prestataire:
        algorithm: bcrypt
      App\Entity\User:
        algorithm: bcrypt
      App\Entity\Internaute:
        algorithm: bcrypt
  # https://symfony.com/doc/current/security.html
  # where-do-users-come-from-user-providers
  providers:
    in_memory: { memory: ~ }
    in_database:
      entity:
        class: App/Entity/User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      anonymous: true
      provider: in_database
      form_login:
        login_path: securitylogin
        check_path: securitylogin
      logout:
        path: securitylogout
        target: home
      guard:
        authenticators:
        - App\Security\LoginFormAuthenticator
  role_hierarchy:
    ROLE_ADMIN: ROLE_ADMIN
    ROLE_PRESTATAIRE: ROLE_PRESTATAIRE
    ROLE_INTERNAUTE: ROLE_USER
  access_control:
  - { path: ^/admin, roles: ROLE_ADMIN }
  - { path: ^/changepassword, roles: IS_AUTHENTICATED_FULLY }
  - { path: ^/logout, roles: IS_AUTHENTICATED_FULLY }
  - { path: ^/editprofil, roles: IS_AUTHENTICATED_FULLY }
  - { path: ^/firstsignin, roles: IS_AUTHENTICATED_ANONYMOUSLY }
  - { path: ^/registration, roles: IS_AUTHENTICATED_ANONYMOUSLY }
  - { path: ^/connexion, roles: IS_AUTHENTICATED_ANONYMOUSLY }
  - { path: ^/password/reset, roles: IS_AUTHENTICATED_FULLY }

      # activate different ways to authenticate

      # http_basic: true
      # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

      # form_login: true
      # https://symfony.com/doc/current/security/form_login_setup.html

      # Easy way to control access for large sections of your site
      # Note: Only the *first* access control that matches will be used
      # access_control:
      # - { path: ^/admin, roles: ROLE_ADMIN }
      # - { path: ^/profile, roles: ROLE_USER }
